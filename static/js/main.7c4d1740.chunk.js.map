{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","quotes","selectedQuoteIndex","assignNewQuoteIndex","bind","fetch","then","data","json","setState","this","length","random","console","log","className","id","selectedQuote","quote","author","onClick","href","Number","isInteger","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wQA0DeA,E,kDArDb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRC,mBAAoB,MAEtB,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKF,mBAAqB,EAAKA,mBAAmBE,KAAxB,gBAPV,E,gEAUE,IAAD,OACjBC,MAAM,yIACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAL,GAAM,OAAI,EAAKQ,SAAS,CAACR,OAAQA,GAAS,EAAKE,0B,2CAYrD,GAAIO,KAAKV,MAAMC,OAAOU,OAGtB,OAAOC,iBAAO,EAAGF,KAAKV,MAAMC,OAAOU,OAAS,K,4CAI5CD,KAAKD,SAAS,CAACP,mBAAoBQ,KAAKR,yB,+BAKxC,OADAW,QAAQC,IAAIJ,KAAKV,MAAME,oBAErB,yBAAKa,UAAU,MAAMC,GAAG,aACrBN,KAAKO,cACN,yBAAKD,GAAG,QACN,yBAAKA,GAAG,UAAR,KAAoBN,KAAKO,cAAcC,MAAvC,KACA,mCAASR,KAAKO,cAAcE,SACrB,GACT,4BAAQH,GAAG,YAAYI,QAASV,KAAKP,qBAArC,cAEA,uBAAGa,GAAG,cAAcK,KAAK,4BAAzB,kB,oCA7BJ,GAAIX,KAAKV,MAAMC,OAAOU,QAAWW,OAAOC,UAAUb,KAAKV,MAAME,oBAG7D,OAAOQ,KAAKV,MAAMC,OAAOS,KAAKV,MAAME,wB,GArBtBsB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.7c4d1740.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport { random } from 'lodash';\n\nclass App extends Component { \n  constructor(props){\n    super(props);\n    this.state = {\n      quotes: [],\n      selectedQuoteIndex: null,\n    }\n    this.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this);\n    this.selectedQuoteIndex = this.selectedQuoteIndex.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n    .then(data => data.json())\n    .then(quotes => this.setState({quotes: quotes}, this.assignNewQuoteIndex));\n  }\n\n  get selectedQuote(){\n    if(!this.state.quotes.length || !Number.isInteger(this.state.selectedQuoteIndex)){\n      return;\n    }\n    return this.state.quotes[this.state.selectedQuoteIndex];\n    \n  }\n\n  selectedQuoteIndex(){\n    if(!this.state.quotes.length){\n      return undefined;\n    }\n    return random(0, this.state.quotes.length - 1);\n  }\n\n  assignNewQuoteIndex(){\n    this.setState({selectedQuoteIndex: this.selectedQuoteIndex()})\n  }\n\n  render(){\n    console.log(this.state.selectedQuoteIndex);\n    return (\n      <div className=\"App\" id=\"quote-box\">\n        {this.selectedQuote ? \n        <div id=\"text\">\n          <div id=\"author\"> \"{this.selectedQuote.quote}\"</div>\n          <div> - {this.selectedQuote.author}</div>\n        </div> : ''}\n        <button id=\"new-quote\" onClick={this.assignNewQuoteIndex}>Next Quote</button>\n\n        <a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\">Tweet quote</a>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}